const { SlashCommandBuilder, ActionRowBuilder, StringSelectMenuBuilder, EmbedBuilder } = require('discord.js');
const FileManager = require('../utils/fileManager');
const EmbedBuilderUtil = require('../utils/embedBuilder');
const config = require('../config.json');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('generate')
        .setDescription('Select and manage Roblox game files with an interactive menu'),

    async execute(interaction) {
        try {
            // Defer the reply to give us more time to process
            await interaction.deferReply({ ephemeral: true });

            // Get available game files
            const gameFiles = FileManager.getGameFiles();

            if (gameFiles.length === 0) {
                const noGamesEmbed = new EmbedBuilder()
                    .setColor('#ff6b6b')
                    .setTitle('‚ùå No Games Available')
                    .setDescription(config.messages.noGamesFound)
                    .setTimestamp()
                    .setFooter({ text: 'Roblox Game Manager' });

                return await interaction.editReply({ embeds: [noGamesEmbed] });
            }

            // Create select menu options (max 25 options per Discord limitations)
            const options = gameFiles.slice(0, config.settings.maxGamesPerPage).map((file, index) => ({
                label: file.displayName,
                description: `Size: ${file.size} | Modified: ${file.lastModified}`,
                value: file.fileName,
                emoji: 'üéÆ'
            }));

            // Create the select menu
            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('game_select')
                .setPlaceholder('Choose a Roblox game...')
                .addOptions(options);

            const row = new ActionRowBuilder().addComponents(selectMenu);

            // Create embed for the selection prompt
            const selectEmbed = new EmbedBuilder()
                .setColor(config.settings.embedColor)
                .setTitle('üéÆ Roblox Game Generator')
                .setDescription(config.messages.selectGame)
                .addFields(
                    { name: 'üìÅ Available Games', value: `${gameFiles.length} game(s) found`, inline: true },
                    { name: 'üìä Status', value: 'Ready to generate', inline: true }
                )
                .setTimestamp()
                .setFooter({ text: 'Select a game from the dropdown below' });

            await interaction.editReply({
                embeds: [selectEmbed],
                components: [row]
            });

        } catch (error) {
            console.error('Error in /generate command:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff6b6b')
                .setTitle('‚ùå Error')
                .setDescription(config.messages.errorOccurred)
                .setTimestamp();

            if (interaction.deferred) {
                await interaction.editReply({ embeds: [errorEmbed] });
            } else {
                await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            }
        }
    },

    async handleSelectMenu(interaction) {
        try {
            if (interaction.customId !== 'game_select') return;

            // Defer the reply
            await interaction.deferReply();

            const selectedGame = interaction.values[0];
            const gameInfo = FileManager.getGameInfo(selectedGame);

            if (!gameInfo) {
                const errorEmbed = new EmbedBuilder()
                    .setColor('#ff6b6b')
                    .setTitle('‚ùå Game Not Found')
                    .setDescription('The selected game file could not be found.')
                    .setTimestamp();

                return await interaction.editReply({ embeds: [errorEmbed] });
            }

            // Create the generation success embed
            const generatedEmbed = EmbedBuilderUtil.createGameGeneratedEmbed(gameInfo, interaction.user);

            // Create a public embed (what others see)
            const publicEmbed = new EmbedBuilder()
                .setColor('#00ff88')
                .setTitle('üéÆ Condo Has Been Generated!')
                .setDescription('A new Roblox game has been successfully generated!')
                .setImage('https://via.placeholder.com/400x200/00ff88/ffffff?text=Game+Generated')
                .addFields(
                    { name: 'üë§ Generated by', value: interaction.user.toString(), inline: true },
                    { name: '‚è∞ Generated at', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
                )
                .setTimestamp()
                .setFooter({ text: 'Roblox Game Generator' });

            // Send public message to the channel
            await interaction.followUp({
                embeds: [publicEmbed]
            });

            // Send private details to the user
            await interaction.editReply({
                embeds: [generatedEmbed],
                components: [] // Remove the select menu
            });

            // Log the generation
            console.log(`üéÆ Game generated: ${gameInfo.displayName} by ${interaction.user.tag}`);

        } catch (error) {
            console.error('Error handling select menu:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff6b6b')
                .setTitle('‚ùå Generation Failed')
                .setDescription('Failed to generate the selected game. Please try again.')
                .setTimestamp();

            if (interaction.deferred) {
                await interaction.editReply({ embeds: [errorEmbed] });
            } else {
                await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            }
        }
    }
};
